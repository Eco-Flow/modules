nextflow_process {

    name "Test Process METAMAPS_MAPDIRECTLY"
    script "../main.nf"
    process "METAMAPS_MAPDIRECTLY"

 test("sarscov2_nanopore_mapdirectly") {
    setup {
        run("UNTAR") {
            config "./nextflow.config"
            script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [
        [],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/metamaps_db.tar.gz', checkIfExists: true)
    ]
                    """
                }
            }
    }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test_fastq_gz'], checkIfExists: true)
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }

    }

 test("sarscov2_nanopore_mapdirectly - stub ") {

    options "-stub"

    setup {
        run("UNTAR") {
            config "./nextflow.config"
            script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [
        [],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/metamaps_db.tar.gz', checkIfExists: true)
    ]
                    """
                }
            }
    }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.test_data['sarscov2']['nanopore']['test_fastq_gz'], checkIfExists: true)
                ]
                input[1] = UNTAR.out.untar.map{ it[1] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot ( process.out ).match() }
            )
        }

    }

}

